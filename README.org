
* Web applications framework template

The aim of this project is to provide an easy way to create ready-to-develop web applications. Repository consists of
~cargo generate~ and Makefile.

* Key features

** Core applications templating

 * Web application on top of actix-web. One can generate multiple webapps based on the same code base.
 * Each webapp is been generated with ready-to-use command line arguments parser (crate ~clap~), structured logging (set
   ~slog~ of crates)
 * Some sort of plugins. Plugins provides easy way to organize structured code in complicated projects.
 * Plugin generator: just run ~make generate-plugin~ (see below).

** Configuration

 * Each plugin has it's own configuration file which is read automatically on startup.
 * Configuration file is self-documented with ~structdoc~ crate, by default webapp has sub-commands to dump config files
   and print documentation on it.
 * Config objects are well separated from rest of code, i.e. it's easy to develop other implementations, for instance
   etcd, or add reactive in-memory updates via inotify.

** Database support

 * Added support for Postgresql databases, which is implemented as just another plugin
 * As usual, one can generate DB instance with command: ~make generate-db-postgres~
 * Each DB plugin has its own YAML config and DB pool. Pool is automatically registered ad Data in Actix-web framework.
   Thus, DB pool becomes available in all HTTP endpoints.
 * Each DB plugin implements DB migrations which runs automatically at startup.

** Infrastructure

Makefile contains some useful targets:
 * Check code with clippy
 * Check and fix modules and dependencies with cargo audit, udeps and so on.
 * Install dependencies
 * Generate *.deb package
 * Fast build with no debug symbols

* Getting started

** Generate web application

Just run command and type application (crate) name:

#+BEGIN_SRC bash
make generate-webapp
#+END_SRC

Directory with new webapp will be appeared. Now manually add it to workspace in Cargo.toml.

** Add webapp plugin

#+BEGIN_SRC bash
make generate-plugin
#+END_SRC

After plugin is been generated, manual actions required:
 1. Add it to workspace in Cargo.toml
 2. Set unique plugin name in PLUGIN_DIRECTORY/src/lib.rs → plugin_name()
 3. Register it in WEBAPP_DIRECTORY/src/plugins.rs → list()

** Add Postgresql instance plugin

#+BEGIN_SRC bash
make generate-db-postgres
#+END_SRC

After that register it in the same was as webapp plugin and then start with diesel.toml and ~migrations~ in directory of
new plugin.

** Install required tools (optional)

Actually this step is required to get full functionality of Makefile.

#+BEGIN_SRC bash
make install-tools
#+END_SRC

** Use it!

You are done. You have project with web application, config files with documentation, databases, logging, command line
interface.
